import java.io.File;
import java.io.FileNotFoundException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

public class EmployeeHandler
{
	private static final String EMPTY_STRING = "";

	private static final int INVALID_AGE = -1;

	private static final double INVALID_LENGHT_OF_SERVICE = -1;

	private static final int VALID_DATA_MEMEBERS_COUNT = 2;

	public static String getFirst3MostCommonLettersInNames(List<Employee> employees)
	{
//		class KeyValue<K, V extends Comparable<? super V>> implements Comparable<KeyValue<K, V>>
//		{
//			private K key;
//
//			private V value;
//			
//			KeyValue(K key, V value)
//			{
//				this.key = key;
//				this.value = value;
//			}
//			
//			K getKey()
//			{
//				return key;
//			}
//
//			void setKey(K key)
//			{
//				this.key = key;
//			}
//
//			V getValue()
//			{
//				return value;
//			}
//
//			void setValue(V value)
//			{
//				this.value = value;
//			}
//
//			@Override
//			public int compareTo(KeyValue<K, V> keyValuePair)
//			{
//				return this.getValue().compareTo(keyValuePair.getValue());
//			}
//			
//			@Override
//			public boolean equals(Object obj)
//			{
//				if (obj instanceof KeyValue)
//				{
//					KeyValue<K,V> parsedObj = (KeyValue<K,V>)obj;
//					if (this.getKey().equals(parsedObj.getKey()))
//					{
//						return true;
//					}
//				}
//				return false;
//			}
//			
//			@Override
//			public int hashCode()
//			{
//				return this.getKey().hashCode();
//			}
//		}
		
		Map<Character, Integer> letterCounter = new HashMap<Character, Integer>();
		for (Employee employee : employees)
		{
			String name = employee.getName().toLowerCase().replace(" ", "");
			for (int i = 0; i < name.length(); i++)
			{
				if (!letterCounter.containsKey(name.charAt(i)))
				{
					letterCounter.put(name.charAt(i), 0);
				}

				int currentCount = letterCounter.get(name.charAt(i));
				currentCount++;
				letterCounter.put(name.charAt(i), currentCount);
			}
		}

		
	}

	public static int getAverageEmployeeAge(List<Employee> employees)
	{
		int ageSum = 0;
		for (Employee employee : employees)
		{
			ageSum += employee.getAge();
		}

		int averageAge = ageSum / employees.size();
		return averageAge;
	}

	public static List<Employee> loadEmployeesFromFile(String pathname)
	{
		File fileToRead = new File(pathname);

		Scanner reader = null;
		try
		{
			reader = new Scanner(fileToRead, StandardCharsets.UTF_8.name());
		}
		catch (FileNotFoundException fnfe)
		{
			System.err.println(fnfe.getMessage());
			System.err.println(fnfe.getStackTrace());
		}

		Employee employee = new Employee(EMPTY_STRING, INVALID_AGE, INVALID_LENGHT_OF_SERVICE);
		List<Employee> employeeList = new ArrayList<Employee>();
		while (reader.hasNextLine())
		{
			String line = reader.nextLine().trim();
			if (line.equals("<<>>"))
			{
				if (!employee.getName().equals(EMPTY_STRING) && employee.getAge() != INVALID_AGE
						&& employee.getLengthOfService() != INVALID_LENGHT_OF_SERVICE)
				{
					employeeList.add(employee);
					employee = new Employee(EMPTY_STRING, INVALID_AGE, INVALID_LENGHT_OF_SERVICE);
				}
			}
			else
			{
				populateCurrentEmployeeWithData(employee, line);
			}
		}

		reader.close();

		return employeeList;
	}

	private static void populateCurrentEmployeeWithData(Employee employee, String data)
	{
		String[] parsedData = data.split("[=]+");
		if (parsedData.length == VALID_DATA_MEMEBERS_COUNT)
		{
			String commandName = parsedData[0].trim();
			String commandValue = parsedData[1];
			switch (commandName)
			{
				case "name":
					employee.setName(commandValue);
					break;
				case "age":
					employee.setAge(Integer.parseInt(commandValue));
					break;
				case "lengthOfService":
					employee.setLengthOfService(Double.parseDouble(commandValue));
					break;
				default:
					throw new IllegalArgumentException("Illegal commandName");
			}
		}
	}
}
